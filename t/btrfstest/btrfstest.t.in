#!/usr/bin/perl

use strict;
use Test::More tests => 8;
use File::Path;
use SysWrap;
use Mock;

# Ensure a valid btrfs-specific config succeeds.
ok(0 == rsnapshot("-c @TEST@/btrfstest/conf/btrfs.conf configtest"),
	"Basic btrfs-enabled config test");

# Ensure a bad btrfs command causes a failure.
ok(1 == rsnapshot("-c @TEST@/btrfstest/conf/btrfs-badcmd.conf configtest"),
	"Bad btrfs executable causes a failure.");

# Ensure a btrfs command without a btrfs snapshot name causes a
# failure.  The snapshot name is required to generate a BTRFS
# snapshot.
ok(1 == rsnapshot("-c @TEST@/btrfstest/conf/btrfs-nosnapname.conf configtest"),
	"Btrfs command without snapshot name causes a failure.");

# Ensure a configuration without any btrfs command or snapshot name
# does not generate an error.  Don't want non-Linux, non-BTRFS folks
# to be angry...
ok(1 == rsnapshot("-c @TEST@/btrfstest/conf/btrfs-nobtrfs.conf configtest"),
	"Config without btrfs options correctly parses");

# Prepare for a real invocation, not just a configuration test, by
# creating the btrfs-snapshot directory
mkdir "@TEST@/support/rsnapshot-btrfs-snap" unless -d "@TEST@/support/rsnapshot-btrfs-snap";

# Ensure that rsync and btrfs are executed as expected.  The log file
# from the mocked btrfs command should contain the 'subvolume
# snapshot' and 'subvolume delete' commands based on the
# btrfs.conf definitions.
mock_init();
ok(0 == rsnapshot("-c @TEST@/btrfstest/conf/btrfs.conf hourly"),
	"Backup with btrfs config succeeds");
open(FH, "<", "@TEST@/mock/logs/btrfs.log") or die "btrfs-log couldn't be opened";
chomp(my @lines = <FH>);
my $expected_lines = 2;
my $actual_lines   = scalar @lines;
ok($expected_lines == $actual_lines, "Expected number of lines were generated by btrfs binary")
  or diag("Expected $expected_lines lines, got $actual_lines");

my $btrfs_snap = "subvolume snapshot @TEST@/support/files @TEST@/support/rsnapshot-btrfs-snap ";
ok($btrfs_snap eq $lines[0], "Btrfs snapshot is created as expected")
  or diag("Expected '$btrfs_snap', got '$lines[0]'");
my $btrfs_del = "subvolume delete -C @TEST@/support/rsnapshot-btrfs-snap ";
ok($btrfs_del eq $lines[1], "Btrfs snapshot is deleted as expected")
  or diag("Expected '$btrfs_del', got '$lines[1]'");
mock_cleanup();

# Clean up the rsnapshot-btrfs-snap directory, leave behind no
# trace...
rmtree("@TEST@/support/rsnapshot-btrfs-snap");

1;
